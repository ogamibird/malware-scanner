package com.sdase.malware.scanner.io;

import com.sdase.malware.scanner.exception.FileDownloadException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.client.AutoConfigureMockRestServiceServer;
import org.springframework.boot.test.autoconfigure.web.client.RestClientTest;
import org.springframework.core.io.Resource;
import org.springframework.http.MediaType;
import org.springframework.test.web.client.MockRestServiceServer;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withBadGateway;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

@RestClientTest(FileDownloadService.class)
@AutoConfigureMockRestServiceServer
class FileDownloadServiceTest {

    @Autowired
    private FileDownloadService fileDownloadService;
    @Autowired
    private MockRestServiceServer mockRestServiceServer;

    @BeforeEach
    void setUpServer() {
    }

    @Test
    void downloadFile() throws IOException {
        String message = "Test";
        String uri = "https://test.de/test.txt";

        mockRestServiceServer.expect(requestTo(uri))
                             .andRespond(withSuccess("Test", MediaType.TEXT_PLAIN));

        Resource actualResource = fileDownloadService.downloadFile(uri);

        String resourceContent = actualResource.getContentAsString(StandardCharsets.UTF_8);
        assertThat(resourceContent).isEqualTo(message);
    }

    @Test
    void invalidUrlTest() {
        String uri = "htttp://sdasd.de";
        mockRestServiceServer.expect(requestTo(uri));

        assertThatThrownBy(() -> fileDownloadService.downloadFile(uri))
                .isInstanceOf(FileDownloadException.class);
    }

    @Test
    void errorStatusTest() {
        String uri = "https://test.de/test.txt";
        mockRestServiceServer.expect(requestTo(uri))
                             .andRespond(withBadGateway());

        assertThatThrownBy(() -> fileDownloadService.downloadFile(uri))
                .isInstanceOf(FileDownloadException.class);
    }
}