package com.sdase.malware.scanner.scanning;

import com.sdase.malware.scanner.exception.FileDownloadException;
import com.sdase.malware.scanner.io.FileDownloadService;
import com.sdase.malware.scanner.model.CheckRequest;
import com.sdase.malware.scanner.model.CheckResult;
import org.junit.jupiter.api.Test;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.MediaType;
import org.springframework.util.MimeType;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.tuple;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.mock;

class MalwareScannerServiceTest {

    private final FileDownloadService fileDownloadService = mock(FileDownloadService.class);

    @Test
    void scanFile() {
        given(fileDownloadService.downloadFile(anyString())).willReturn(new ByteArrayResource("test".getBytes()));

        CheckResult result1 = CheckResult.builder()
                                         .state(CheckResult.State.OK)
                                         .checkName("check1")
                                         .build();
        MalwareCheck check1 = mock(MalwareCheck.class);
        given(check1.check(any(), any())).willReturn(result1);

        CheckResult result2 = CheckResult.builder()
                                         .state(CheckResult.State.SUSPICIOUS)
                                         .checkName("check2")
                                         .build();
        MalwareCheck check2 = mock(MalwareCheck.class);
        given(check2.check(any(), any())).willReturn(result2);
        given(check2.abortOnSuspicionFound()).willReturn(true);

        MalwareCheck check3 = mock(MalwareCheck.class);
        given(check3.getName()).willReturn("check3");

        List<MalwareCheck> checks = List.of(check1, check2, check3);

        MalwareScannerService service = new MalwareScannerService(checks, fileDownloadService);

        CheckRequest checkRequest = new CheckRequest();
        checkRequest.setUrl("http://sdsad.de");
        checkRequest.setFileType(MediaType.TEXT_PLAIN_VALUE);
        List<CheckResult> checkResults = service.scanFile(checkRequest);
        assertThat(checkResults).extracting(
                                        CheckResult::getState,
                                        CheckResult::getCheckName
                                )
                                .containsExactly(
                                        tuple(CheckResult.State.OK, "check1"),
                                        tuple(CheckResult.State.SUSPICIOUS, "check2"),
                                        tuple(CheckResult.State.IGNORED, "check3")
                                );
    }

    @Test
    void scanFileBadMimeType() {
        MalwareScannerService service = new MalwareScannerService(Collections.emptyList(), fileDownloadService);

        CheckRequest checkRequest = new CheckRequest();
        checkRequest.setFileType("sdsadsadsa");

        List<CheckResult> checkResults = service.scanFile(checkRequest);

        assertThat(checkResults).hasSize(1)
                                .extracting(CheckResult::getState,
                                        CheckResult::getCheckName)
                                .containsExactly(tuple(CheckResult.State.ERROR, "Setup"));
    }

    @Test
    void scanFileFileDownloadFailedTest() {
        given(fileDownloadService.downloadFile(anyString())).willThrow(new FileDownloadException());

        CheckRequest checkRequest = new CheckRequest();
        checkRequest.setFileType(MediaType.TEXT_PLAIN_VALUE);
        checkRequest.setUrl("http://test.de/te.txt");

        MalwareScannerService service = new MalwareScannerService(Collections.emptyList(), fileDownloadService);
        List<CheckResult> checkResults = service.scanFile(checkRequest);

        assertThat(checkResults).hasSize(1)
                                .extracting(CheckResult::getState,
                                        CheckResult::getCheckName)
                                .containsExactly(tuple(CheckResult.State.ERROR, "Setup"));
    }

    private static class TestMalwareCheckA implements MalwareCheck {

        @Override
        public int getPriority() {
            return 1;
        }

        @Override
        public String getName() {
            return "TestMalwareCheckA";
        }

        @Override
        public boolean abortOnSuspicionFound() {
            return false;
        }

        @Override
        public CheckResult check(Resource resource, MimeType type) {
            return null;
        }
    }
}