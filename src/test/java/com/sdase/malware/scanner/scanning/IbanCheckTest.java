package com.sdase.malware.scanner.scanning;

import com.sdase.malware.scanner.dao.IbanBlacklistRepo;
import com.sdase.malware.scanner.exception.FileDataExtractionException;
import com.sdase.malware.scanner.io.FileDataExtractionService;
import com.sdase.malware.scanner.model.CheckResult;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class IbanCheckTest {


    @Mock
    private FileDataExtractionService fileDataExtractionService;
    @Mock
    private IbanBlacklistRepo ibanBlacklistRepo;
    @InjectMocks
    private IbanCheck ibanCheck;
    @Captor
    private ArgumentCaptor<Set<String>> ibanCaptor;

    @ParameterizedTest
    @MethodSource("checkTestProvider")
    void checkTest(String iban, boolean blacklisted) {
        given(ibanBlacklistRepo.findAllByIbans(any())).willReturn(
                blacklisted ? Set.of(iban) : Collections.emptySet()
        );
        given(fileDataExtractionService.extractData(any(), any())).willReturn("sdsadsa%ssdsadsa".formatted(iban));

        CheckResult check = ibanCheck.check(null, null);

        verify(ibanBlacklistRepo).findAllByIbans(ibanCaptor.capture());

        assertThat(ibanCaptor.getValue()).contains(iban);

        if (blacklisted) {
            assertThat(check.getState()).isEqualTo(CheckResult.State.SUSPICIOUS);
        } else {
            assertThat(check.getState()).isEqualTo(CheckResult.State.OK);
        }
    }

    private static Stream<Arguments> checkTestProvider() {
        return IntStream.range(0, TEST_IBANS.size())
                        .mapToObj(i -> Arguments.of(TEST_IBANS.get(i), i % 2 == 0));
    }

    @Test
    void checkExtrationErrorTest() {
        given(fileDataExtractionService.extractData(any(), any())).willThrow(new FileDataExtractionException());

        CheckResult check = ibanCheck.check(null, null);
        assertThat(check.getState()).isEqualTo(CheckResult.State.ERROR);
    }


    private static final List<String> TEST_IBANS = List.of(
            "AD4881488836949599068611",
            "AD4707311274968242155290",
            "AE544846096237569809619",
            "AE107550167269052673317",
            "AL98191573413336442582813706",
            "AL43339431957593440747999229",
            "AT220164591200896367",
            "AT489184017069885149",
            "AZ31TSCZ74901082449057100637",
            "AZ36XVMV00405587632197887063",
            "BA737252751585949192",
            "BA909084145691933325",
            "BE33975514609167",
            "BE67662320408998",
            "BG77UXYM34163324175198",
            "BG25FCOX77283994577153",
            "BH05YUAE96192462018710",
            "BH76GSNH74551967967583",
            "CH1730715671962657668",
            "CH8627867090473872523",
            "CY50446947040139892881294148",
            "CY16501658530560465424741522",
            "CZ5920752186031830784412",
            "CZ4724162161920319330431",
            "DE71326739979468029771",
            "DE72550498247921206176",
            "DK4612250459499281",
            "DK9228798735401729",
            "DO88537425003743872318722645",
            "DO52010657567729417200540071",
            "EE476043845947934067",
            "EE764963786871204933",
            "ES9191644660149909306095",
            "ES8642790734772874785118",
            "FI8516193058451467",
            "FI4094895186519314",
            "FO5419398735472086",
            "FO1473413756495219",
            "FR2348892652677673576025365",
            "FR5903379066353874199689526",
            "GB23ZRVE94616645347317",
            "GB34PDLF33844210502399",
            "GE75PR1903506203021026",
            "GE80RI0559159043240628",
            "GI58IIAA580506473532871",
            "GI53GNCZ993549199494268",
            "GL1402580579196685",
            "GL0542947713086698",
            "GR8675608149404398316576699",
            "GR8719679167267117183464848",
            "HR7107580516701822888",
            "HR8674804895661873712",
            "HU59605521584182460338215336",
            "HU66040354499489133701780240",
            "IE87WXBP61820358114229",
            "IE75RYBI08034979191137",
            "IL123793093763827019690",
            "IL665650659578925583580",
            "IS225480571821705323055222",
            "IS927164274217486953849402",
            "IT12X3528953857892908302635",
            "IT71Y2008548915174874546741",
            "LB77994233077880136442506172",
            "LB46530970603588946319796426",
            "LI7492368522489937011",
            "LI1663413703758300468",
            "LT144504846356690649",
            "LT178267755046519729",
            "LU592263725823779857",
            "LU830851846541111572",
            "LV43BSLF6768280245671",
            "LV41KLCS3930458476814",
            "MC4360200178324198852043707",
            "MC3029725091399243245289107",
            "ME52453093652774439015",
            "ME71175530011526469560",
            "MK20112769138188171",
            "MK18285183094805367",
            "MT97ZTSW07616878505803723545224",
            "MT32SORQ38812349097725167125218",
            "MU24ZFSH8507049364477561920AFR",
            "MU71XDAS5718428788661830048TMR",
            "NL14PZHR1220268631",
            "NL37XSVA2122219718",
            "NO8828856086039",
            "NO5900891236530",
            "PL30108620364444529242326600",
            "PL59386329478101885654452012",
            "PT58391613825660891335793",
            "PT79350090872240145624270",
            "RO40LHAA9907123260561470",
            "RO40BURG8875408680609729",
            "RS50222864090629874091",
            "RS79852420271271164286",
            "SA3205369469560305677371",
            "SA4932600007744318864963",
            "SE8181541978123798670070",
            "SE4701275968091140449748",
            "SI30584647581367077",
            "SI86262701593197455",
            "SK0391644685490178756220",
            "SK8462780803655081893652",
            "SM82W5244866551591997101924",
            "SM29R6624325996803553371954",
            "TR588230630289400488022450",
            "TR453464440954970570622209"
    );

}