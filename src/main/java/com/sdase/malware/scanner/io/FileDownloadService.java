package com.sdase.malware.scanner.io;

import com.sdase.malware.scanner.exception.FileDownloadException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.PathResource;
import org.springframework.core.io.Resource;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Service;
import org.springframework.util.StreamUtils;
import org.springframework.web.client.RestClient;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;

@Slf4j
@Service
public class FileDownloadService {

    private static final String FILE_PREFIX = "malware_scanner";

    private final RestClient restClient;

    public FileDownloadService(RestClient.Builder builder) {
        this.restClient = builder.build();
    }

    public Resource downloadFile(String url) {
        log.debug("Starting to download file from: {}", url);
        try {
            Resource resource = downloadFileInternal(url);
            log.debug("File downloaded successfully from: {}", url);
            return resource;
        } catch (RuntimeException e) {
            throw new FileDownloadException("Failed to download file from %s".formatted(url), e);
        }
    }

    private Resource downloadFileInternal(String url) {
        Path tempFile = createTempFile();
        tempFile.toFile().deleteOnExit();

        return restClient.get()
                         .uri(url)
                         .exchange((clientRequest, clientResponse) -> handleResponse(clientResponse));
    }

    private PathResource handleResponse(ClientHttpResponse response) {
        handleRequestError(response);
        Path tempFile = createTempFile();
        try (FileOutputStream f = new FileOutputStream(tempFile.toFile())) {
            StreamUtils.copy(response.getBody(), f);
        } catch (IOException e) {
            throw new FileDownloadException("Failed to write response to temporary file.", e);
        }
        return new PathResource(tempFile);
    }

    private static Path createTempFile() {
        try {
            Path tempFile = Files.createTempFile("%s_%s".formatted(FILE_PREFIX, UUID.randomUUID()), ".tmp");
            tempFile.toFile().deleteOnExit();
            return tempFile;
        } catch (IOException e) {
            throw new FileDownloadException("Failed to create temporary file.", e);
        }
    }

    private void handleRequestError(ClientHttpResponse response) {
        try {
            if (response.getStatusCode().isError()) {
                throw new FileDownloadException("HTTP-error during download of document. Status: %s, Reason: %s".formatted(response.getStatusCode(), response.getStatusText()));
            }
        } catch (IOException e) {
            throw new FileDownloadException("Unknown error during download of document. %s".formatted(e.getMessage()));
        }
    }
}
